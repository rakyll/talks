Tools to understand Go toolchain

Jaana Burcu Dogan
Google

jbd@golang.org
@rakyll

* Toolchain

- What makes the toolchain?
- How does the toolchain being invoked?
- How to make sure correct flags are passed to C compiler?

    $ go build -x

* Assembly

In Go, you can feed the linker either with compile or asm output.

- What does the compiler generate for a Go line?
- How to rewrite certain functions in pseudo Go assembly?

    $ go build -gcflags="-S"

* Disassemble

- What goes into the final binary or library?
- What else is generated for a specific arch?
- Is a specific instruction being used for an optimization?

    $ go tool objdump -s <pattern>

* Symbols

- Which symbols got into the final binary?
- What does the linker eliminate?

    $ go tool nm

* Bypass optimizations

Optimization can change the sequence of operations, remove code, etc.

- How can I debug without being affected by transformations?
- How to do A/B perf testing and changing one thing at a time?

    $ go build -gcflags="-I -N"

* Visualizing optimizations

- Which SSA optimization phases do the compiler apply?
- How does my code being optimized?

    $ GOSSAFUNC=main go build && open ssa.html

* Syntax tree

- How to write tools that takes a Go source code as input?
- How to use the `go/ast` package? It is tooooo abstract.

    $ go get golang.org/x/tools/cmd/gotype
    $ gotype -ast main.go

* Lexer debugging

- How does the lexer work?
- What are the types of tokens that lexer can return?
- How to ensure whether there is a lexer bug or not?

    $ go build -gcflags="-x" main.go

