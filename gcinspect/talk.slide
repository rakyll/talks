Codegen inspection

Jaana Burcu Dogan
Google

jbd@golang.org
@rakyll


* Disclaimer

No need to learn any of what's presented here, but these tools are handy to learn more about the toolchain or do sanity check before filing a bug against the compiler.

: I'd like to start with a disclaimer that none of what's presented is mandatorily required if you are a Go programmer.
: It is a talk mostly focusing on understanding and being able to debug the toolchain more precisely.
: And if you are contributing or filing bugs against the compiler, this talk may give you some handy tools.

* An example program

    package main

    import "fmt"

    func main() {
        sum := 1 + 1
        fmt.Printf("sum: %v\n", sum)
    }

: There is an example program here.
: I will use the same example to demonstrate each slide during the talk.
: It really doesn't do much, a sum followed by a printf.

* Toolchain

- What makes the toolchain?
- How does the toolchain being invoked?
- How to make sure correct flags are passed to C compiler?

    $ go build -x

Output:

    WORK=/var/folders/00/1b8h8000h01000cxqpysvccm005d21/T/go-build190726544
    mkdir -p $WORK/hello/_obj/
    mkdir -p $WORK/hello/_obj/exe/
    cd /Users/jbd/src/hello
    /Users/jbd/go/pkg/tool/darwin_amd64/compile -o $WORK/hello.a -trimpath $WORK -p main -complete -buildid d934a5702088e0fe5c931a55ff26bec87b80cbdc -D _/Users/jbd/src/hello -I $WORK -pack ./hello.go
    cd .
    /Users/jbd/go/pkg/tool/darwin_amd64/link -o $WORK/hello/_obj/exe/a.out -L $WORK -extld=clang -buildmode=exe -buildid=d934a5702088e0fe5c931a55ff26bec87b80cbdc $WORK/hello.a
    mv $WORK/hello/_obj/exe/a.out hello


: Go build is a command that encapsulates tons of things from the user.
: But, it also provides more detailed information about what it does -- if you ask for it.
: -x is a flag that makes go build output what is being invoked.
: If you generally want to see what the components of the toolchain are, which sequence they are invoked and which flags being used, you can have a broader idea by running build with x.

* Assembly

- What intermediate instructions do the compiler generate for a Go line?
- How to rewrite certain functions to optimize?

    $ go build -gcflags="-S"

Output:

    "".main t=1 size=179 args=0x0 locals=0x60
        0x0000 00000 (/Users/jbd/src/hello/hello.go:5)	TEXT	"".main(SB), $96-0
        0x0000 00000 (/Users/jbd/src/hello/hello.go:5)	MOVQ	(TLS), CX
        0x0009 00009 (/Users/jbd/src/hello/hello.go:5)	CMPQ	SP, 16(CX)
        0x000d 00013 (/Users/jbd/src/hello/hello.go:5)	JLS	169
        0x0013 00019 (/Users/jbd/src/hello/hello.go:5)	SUBQ	$96, SP
        0x0017 00023 (/Users/jbd/src/hello/hello.go:5)	MOVQ	BP, 88(SP)
        0x001c 00028 (/Users/jbd/src/hello/hello.go:5)	LEAQ	88(SP), BP
        0x0021 00033 (/Users/jbd/src/hello/hello.go:5)	FUNCDATA	$0, gclocals·69c1753bd5f81501d95132d08af04464(SB)
        0x0021 00033 (/Users/jbd/src/hello/hello.go:5)	FUNCDATA	$1, gclocals·21a8f585a14d020f181242c5256583dc(SB)
        0x0021 00033 (/Users/jbd/src/hello/hello.go:7)	MOVQ	$2, "".autotmp_1+64(SP)
        0x002a 00042 (/Users/jbd/src/hello/hello.go:7)	MOVQ	$0, "".autotmp_0+72(SP)
        ...

: Next item is a sneak peak into the code generation.
: In Go, there is an intermediate assembly phase before generating the actual arch-specific assembly.
: Compiler takes some go files, generates the intermediate instructions and escalate it to the obj package to generate the machine code.
: If you are curious about what compiler generates in this phase, -S provides the output.
: It is generally good reference to understand the cost of a Go line.
: Or it coulbe be a great reference if you want to replace, let's say, a Go function with more optimized assembly equivalent.
: You are seeing the output for the main.main here.

* Disassembler

- What goes into the final binary or library?
- What else is generated for a specific arch?
- Is a specific instruction being used for an optimization?

    $ go tool objdump -s main.main hello

Output:

    TEXT main.main(SB) /Users/jbd/src/hello/hello.go
        hello.go:5	0x2040	65488b0c25a0080000  GS MOVQ GS:0x8a0, CX
        hello.go:5	0x2049	483b6110            CMPQ 0x10(CX), SP
        hello.go:5	0x204d	0f8696000000        JBE 0x20e9
        hello.go:5	0x2053	4883ec60            SUBQ $0x60, SP
        hello.go:5	0x2057	48896c2458          MOVQ BP, 0x58(SP)
        hello.go:5	0x205c	488d6c2458          LEAQ 0x58(SP), BP
        hello.go:7	0x2061	48c744244002000000  MOVQ $0x2, 0x40(SP)
        hello.go:7	0x206a	48c744244800000000  MOVQ $0x0, 0x48(SP)
        hello.go:7	0x2073	48c744245000000000  MOVQ $0x0, 0x50(SP)
        hello.go:7	0x207c	488d053d4d0800      LEAQ 0x84d3d(IP), AX
        ...

: As I mentioned, -S is only for the intermediate assembly. The actual machine representation is available in the final artifact.
: You can use a disassembler to examine what's inside.
: Use `go tool objdump` with a binary or library. You probably also want to use -s to focus by symbol name.
: In this example, I am dumping the main.main. This is the actual assembly generated for darwin/amd64.

* Symbols

- Which symbols got into the final binary?
- What does the linker eliminate?

    $ go tool nm hello

Output:

    f4760 B __cgo_init
    f4768 B __cgo_notify_runtime_init_done
    f4770 B __cgo_thread_start
    4fb70 T __rt0_amd64_darwin
    4e220 T _gosave
    4fb90 T _main
    ad1e0 R _masks
    4fd00 T _nanotime
    4e480 T _setg_gcc
    ad2e0 R _shifts
    624a0 T errors.(*errorString).Error
    62400 T errors.New
    52470 T fmt.(*buffer).WriteRune
    ...

: Sometimes, all you need is to check the symbols rather than understanding code or data sections.
: Similar to nm tool, Go distributes an nm which allows you to list the symbols in an artifact with annotations and size.
: Pretty handy if you want to see what's in and being exported from a Go binary or library.

* Optimizations

- Which SSA optimization passes do the compiler apply?
- How does my code being optimized?

    $ GOSSAFUNC=main go build && open ssa.html

.image img/ssa.png _ 900

: The next section is about optimizations.
: With the contribution of the new SSA backend, the team contributed a tool that visualizes all the SSA passes.
: Set GOSSAFUNC env variable with a func name and run the go build command.
: It will generate an ssa.html file which will provide all the steps, compiler has gone through to optimize your code.
: You are looking at a screenshot of ssh.html in the image.

* Optimizations (cont)

- What is escaping?
- What is being inlined?

    $ go build -gcflags="-m" golang.org/x/net/context

Output:

    # golang.org/x/net/context
    ../net/context/context.go:140: can inline Background
    ../net/context/context.go:149: can inline TODO
    ../net/context/go17.go:62: inlining call to time.Time.Add
    ../net/context/context.go:141: background escapes to heap
    ../net/context/context.go:150: todo escapes to heap
    ../net/context/go17.go:33: parent escapes to heap
    ../net/context/go17.go:32: leaking param: parent
    ../net/context/go17.go:47: parent escapes to heap
    ../net/context/go17.go:46: leaking param: parent
    ../net/context/go17.go:46: leaking param: deadline
    ../net/context/go17.go:48: ctx escapes to heap
    ../net/context/go17.go:61: leaking param: parent
    ../net/context/go17.go:71: parent escapes to heap

: Go compiler can also annotate the inlining and escape analysis.
: If you pass -m flag to the compiler, it will output the optimizations or annotations related to these two.
: Here we see the net/context package related inlining operations and escape analysis.

* Optimizations (cont)

Optimization can change the sequence of operations, remove code, etc.

- How to bypass optimizations?
- How can I debug without being affected by transformations?
- How to do A/B perf testing and changing one thing at a time?

    $ go build -gcflags="-l -N"

: It is worth to mention that you often need to disable optimizations to have a simpler view of what's going on.
: Because, optimazation can change the sequence of operations, add code, remove code or apply transformations to the code.
: And It gets harder to map a Go line to the optimized output.
: Or it gets harder to do perf testing where you end up chaging more than one thing at a time.
: Disabling optimizations is possible with N, and disabling inlining is possible with L.

: --
: That is all for this talk.
: There are a few other useful gcflags I was not able to mention, but hopefully I was able to give you the essense of the most useful.
: Thanks.